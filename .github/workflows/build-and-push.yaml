name: Build and Push to ECR
on:
  push
env:
  AWS_REGION : "eu-central-1"
  REPOSITORY: secudoc
# permission can be added at job level or workflow level
permissions: write-all # change this to granular permissions
  # id-token: write   # This is required for requesting the JWT
  # contents: read    # This is required for actions/checkout
  
jobs:
  Unit_Test:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: 'npm'

      - run: npm ci

      - name: Run Unit Tests
        run: npm test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: junit.xml    # Path to test results
          reporter: jest-junit        # Format of test results

  Build_Docker_Image:
    timeout-minutes: 2
    needs: Unit_Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::060595330994:role/github_actions
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'false'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          push: true
          provenance: false

  Report_vulnerabilities:
    timeout-minutes: 2
    needs: Build_Docker_Image
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::060595330994:role/github_actions
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'false'
      
      - name: get the image report
        id: get-image-report
        run: |
          aws ecr describe-image-scan-findings --repository-name ${{ env.REPOSITORY }} --image-id imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }} > image-scan-findings.json
      
      - name: Search for CRITICAL vulnerabilities
        id: search-critical
        run: |
          if [[ $(jq '.imageScanFindings.findings | length' image-scan-findings.json) -gt 0 ]] && [[ $(jq 'any(.imageScanFindings.findings[]; .severity == "CRITICAL")' image-scan-findings.json) ]]; then
            echo "CRITICAL vulnerabilities found"
            exit 1
          else
            echo "SAFE"
          fi
      
      - name: List vulnerabilities
        if: failure()
        run: |
          echo # Found Vulnerabilities > $GITHUB_STEP_SUMMARY
          echo $(jq '.imageScanFindings.findings[] | select(.severity == "CRITICAL") | .name,.description,.uri,.severity ' image-scan-findings.json) >> $GITHUB_STEP_SUMMARY

      - name: Notify safety
        if: success()
        run: echo "# No Vulnerabilities found" >> $GITHUB_STEP_SUMMARY